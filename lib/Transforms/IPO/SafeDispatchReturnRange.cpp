//===- SafeDispatchReturnRange.cpp - SafeDispatch ReturnRange code --------===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file implements the SDReturnRange class.
//
//===----------------------------------------------------------------------===//

#include "llvm/Transforms/IPO/SafeDispatchReturnRange.h"

#include "llvm/IR/DebugInfo.h"
#include "llvm/Transforms/IPO/SafeDispatchTools.h"
#include "llvm/Transforms/IPO/SafeDispatchMD.h"

#include <fstream>
#include <sstream>
#include <llvm/Transforms/IPO/SafeDispatchGVMd.h>

using namespace llvm;

//TODO MATT: format properly / code duplication
static StringRef sd_getClassNameFromMD(llvm::MDNode *MDNode, unsigned operandNo = 0) {
  llvm::MDTuple *mdTuple = cast<llvm::MDTuple>(MDNode);
  assert(mdTuple->getNumOperands() > operandNo + 1);

  llvm::MDNode *nameMdNode = cast<llvm::MDNode>(mdTuple->getOperand(operandNo).get());
  llvm::MDString *mdStr = cast<llvm::MDString>(nameMdNode->getOperand(0));

  StringRef strRef = mdStr->getString();
  assert(sd_isVtableName_ref(strRef));
  return strRef;
}

static StringRef sd_getFunctionNameFromMD(llvm::MDNode *MDNode, unsigned operandNo = 0) {
  assert(MDNode->getNumOperands() > operandNo);

  llvm::MDString *mdStr = cast<llvm::MDString>(MDNode->getOperand(operandNo));

  StringRef strRef = mdStr->getString();
  return strRef;
}

static std::stringstream writeDebugLocToStream(const DebugLoc* Loc) {
  assert(Loc);

  auto *Scope = cast<MDScope>(Loc->getScope());
  std::stringstream Stream;
  Stream << Scope->getFilename().str() + ":" << Loc->getLine() << ":" << Loc->getCol();
  return Stream;
}

static bool isBlackListed(const Function &F) {
  return (F.getName().startswith("llvm.") || F.getName().startswith("__")  || F.getName() == "_Znwm");
}

bool SDReturnRange::runOnModule(Module &M) {
  sdLog::blankLine();
  sdLog::stream() << "P7a. Started running the SDReturnRange pass ..." << sdLog::newLine << "\n";

  CHA = &getAnalysis<SDBuildCHA>();
  Encoder = getAnalysis<SDReturnAddress>().getEncoder();
  FunctionIDMap = getAnalysis<SDReturnAddress>().getFunctionIDMap();

  // Process Callsites and annotate them for the backend pass.
  processVirtualCallSites(M);
  processStaticCallSites(M);

  // Store the data generated by this pass.
  storeCallSites(M);

  sdLog::stream() << sdLog::newLine << "P7a. Finished running the SDReturnRange pass ..." << "\n";
  sdLog::blankLine();
  return false;
}

void SDReturnRange::processVirtualCallSites(Module &M) {
  Function *IntrinsicFunction = M.getFunction(Intrinsic::getName(Intrinsic::sd_get_checked_vptr));

  if (IntrinsicFunction == nullptr) {
    sdLog::warn() << "Intrinsic not found.\n";
    return;
  }

  sdLog::stream() << "\n";
  sdLog::stream() << "Processing virtual CallSites...\n";
  int count = 0;
  for (const Use &U : IntrinsicFunction->uses()) {

    // get the intrinsic call instruction
    CallInst *IntrinsicCall = dyn_cast<CallInst>(U.getUser());
    assert(IntrinsicCall && "Intrinsic was not wrapped in a CallInst?");
    User *User = *(IntrinsicCall->users().begin());
    CallSite *VCall = nullptr;
    for (int i = 0; i < 4; ++i) {
      // User was not found, this should not happen...
      VCall = new CallSite(User);
      if (VCall->getInstruction()) {
        break;
      }

      for (auto *NextUser : User->users()) {
        User = NextUser;
        break;
      }
    }

    if (VCall != nullptr && VCall->getInstruction()) {
      // valid CallSite
      if (addVirtualCallSite(IntrinsicCall, *VCall, M))
        ++count;
    } else {
      sdLog::log() << "\n";
      sdLog::warn() << "CallSite for intrinsic was not found.\n";
      IntrinsicCall->getParent()->dump();
    }
    sdLog::log() << "\n";
  }
  sdLog::stream() << "Found virtual CallSites: " << count << "\n";

}

void SDReturnRange::processStaticCallSites(Module &M) {
  int totalDirect = 0;
  int totalIndirect = 0;
  int countDirect = 0;
  int countIndirect = 0;

  sdLog::stream() << "\n";
  sdLog::stream() << "Processing static CallSites...\n";
  for (auto &F : M) {
    for(auto &MBB : F) {
      for (auto &I : MBB) {
        CallSite Call(&I);
        // Try to use I as a CallInst or a InvokeInst
        if (Call.getInstruction()) {
          if (Function *Callee = Call.getCalledFunction()) {
            if (!isBlackListed(*Callee)) {
              if (addStaticCallSite(Call, M))
                ++countDirect;
            }
          } else if (CallSite(Call).isIndirectCall() && VirtualCallSites.find(Call) == VirtualCallSites.end()) {
            if (addStaticCallSite(Call, M))
              ++countIndirect;
          }
        }
      }
    }
    sdLog::log() << F.getName() << " (direct: " << countDirect << ", indirect:"<< countIndirect << ")\n";
    totalDirect += countDirect;
    totalIndirect += countIndirect;
    countDirect = countIndirect = 0;
  }

  sdLog::stream() << "\n";
  sdLog::stream() << "Found direct static CallSites: " << totalDirect << "\n";
  sdLog::stream() << "Found indirect CallSites: " << totalIndirect << "\n";
  sdLog::stream() << "\n";
}

bool SDReturnRange::addStaticCallSite(CallSite CallSite, Module &M) {
  assert(CallSite.getInstruction() && "Not a CallInst or InvokeInst!");

  // write DebugLoc to map
  const DebugLoc* Loc = getOrCreateDebugLoc(CallSite, M);
  std::stringstream Stream = writeDebugLocToStream(Loc);
  std::string DebugLocString = Stream.str();

  std::string FunctionName;
  if (CallSite.getCalledFunction()) {
    // Direct Call
    FunctionName = CallSite.getCalledFunction()->getName();
    auto Itr = FunctionIDMap.find(FunctionName);
    if (Itr == FunctionIDMap.end()) {
      sdLog::log() << "Skipped static CallSite " << CallSite->getParent()->getParent()->getName()
                   << "(@" << DebugLocString
                   << ") for Callee " << FunctionName << "\n";
      return false;
    }
    FunctionName += "," + std::to_string(Itr->second);
  } else if (CallSite.isTailCall()) {
    // Tail Call
    FunctionName = "__TAIL__";
  } else {
    // Indirect Call
    uint64_t FunctionTypeID = Encoder->getTypeID(CallSite.getFunctionType());
    FunctionName = "__INDIRECT__," + std::to_string(FunctionTypeID);
  }

  Stream << "," << FunctionName;
  CallSiteDebugLocsStatic.push_back(Stream.str());

  sdLog::log() << "Static CallSite " << CallSite->getParent()->getParent()->getName()
               << "(@" << DebugLocString
               << ") for Callee " << FunctionName << "\n";

  return true;
}

bool SDReturnRange::addVirtualCallSite(const CallInst *IntrinsicCall, CallSite CallSite, Module &M) {
  // Extract Metadata from Intrinsic.
  MetadataAsValue *Arg2 = dyn_cast<MetadataAsValue>(IntrinsicCall->getArgOperand(1));
  assert(Arg2);
  MDNode *ClassNameNode = dyn_cast<MDNode>(Arg2->getMetadata());
  assert(ClassNameNode);

  MetadataAsValue *Arg3 = dyn_cast<MetadataAsValue>(IntrinsicCall->getArgOperand(2));
  assert(Arg3);
  MDNode *PreciseNameNode = dyn_cast<MDNode>(Arg2->getMetadata());
  assert(PreciseNameNode);

  MetadataAsValue *Arg4 = dyn_cast<MetadataAsValue>(IntrinsicCall->getArgOperand(3));
  assert(Arg4);
  MDNode *FunctionNameNode = dyn_cast<MDNode>(Arg4->getMetadata());
  assert(FunctionNameNode);

  const StringRef ClassName = sd_getClassNameFromMD(ClassNameNode);
  const StringRef PreciseName = sd_getClassNameFromMD(PreciseNameNode);
  const StringRef FunctionName = sd_getFunctionNameFromMD(FunctionNameNode);

  // Find the correct ID range for this FunctionName.
  std::vector<SDBuildCHA::range_t> ranges = CHA->getFunctionRange(FunctionName, ClassName);
  if (ranges.empty()) {
    sdLog::errs() << "Call for " << FunctionName << " (" << ClassName << "," << PreciseName << ") has no range!?\n";
    return false;
  }

  // Write DebugLoc to map
  const DebugLoc* Loc = getOrCreateDebugLoc(CallSite, M);
  std::stringstream Stream = writeDebugLocToStream(Loc);
  std::string DebugLocString = Stream.str();
  // Add metadata and range info to Stream.
  Stream << "," << ClassName.str() << "," << PreciseName.str() << "," << FunctionName.str()
         << "," << ranges[0].first << "," << ranges[0].second;
  CallSiteDebugLocsVirtual.push_back(Stream.str());

  // Add to VirtualCallsites
  VirtualCallSites.insert(CallSite);

  sdLog::log() << "Virtual CallSite (@" << DebugLocString
               << " for class " << ClassName << "(" << PreciseName << ")::" << FunctionName << "\n";

  return true;
}

void SDReturnRange::storeCallSites(Module &M) {
  sdLog::stream() << "Store all CallSites for Module: " << M.getName() << "\n";

  // Find new backup number
  int number = 0;
  auto outName = "./SD_CallSitesVirtual-backup" + std::to_string(number);
  std::ifstream infile(outName);
  while (infile.good()) {
    number++;
    outName = "./SD_CallSitesVirtual-backup" + std::to_string(number);
    infile = std::ifstream(outName);
  }

  auto &C = M.getContext();
  // Virtual
  {
    llvm::NamedMDNode *MD = M.getOrInsertNamedMetadata(SD_MD_RETUR_VIRTUAL);
    std::vector<Metadata*> MetadataVector;
    for (const auto &Entry : CallSiteDebugLocsVirtual) {
      MetadataVector.push_back(sd_getMDString(C, Entry));
    }
    MD->addOperand(MDTuple::get(C, MetadataVector));

#if false
    std::ofstream Outfile("./SD_CallSitesVirtual");
    std::ostream_iterator<std::string> OutIterator(Outfile, "\n");
    std::copy(CallSiteDebugLocsVirtual.begin(), CallSiteDebugLocsVirtual.end(), OutIterator);
    sdLog::stream() << "Stored virtual CallSites: " << CallSiteDebugLocsVirtual.size() << "\n";
    Outfile.close();

    // Write backup
    std::ifstream src("./SD_CallSites-backup", std::ios::binary);
    std::ofstream dst(outName, std::ios::binary);
    dst << src.rdbuf();
#endif
  }

  // Static
  {
    llvm::NamedMDNode *MD = M.getOrInsertNamedMetadata(SD_MD_RETUR_NORMAL);
    std::vector<Metadata*> MetadataVector;
    for (const auto &Entry : CallSiteDebugLocsStatic) {
      MetadataVector.push_back(sd_getMDString(C, Entry));
    }
    MD->addOperand(MDTuple::get(C, MetadataVector));

#if false
    std::ofstream Outfile("./SD_CallSitesStatic");
    std::ostream_iterator<std::string> OutIterator(Outfile, "\n");
    std::copy(CallSiteDebugLocsStatic.begin(), CallSiteDebugLocsStatic.end(), OutIterator);
    sdLog::stream() << "Stored static CallSites: " << CallSiteDebugLocsStatic.size() << "\n";
    Outfile.close();

    // Write backup
    outName = "./SD_CallSitesStatic-backup" + std::to_string(number);
    std::ifstream src2("./SD_CallSitesStatic", std::ios::binary);
    std::ofstream dst2(outName, std::ios::binary);
    dst2 << src2.rdbuf();
#endif
  }
}

const DebugLoc* SDReturnRange::getOrCreateDebugLoc(CallSite CallSite, Module &M) {
  const DebugLoc &Loc = CallSite.getInstruction()->getDebugLoc();
  if (!Loc) {
    // Minor hack: We generate our own DebugLoc using a dummy MDSubprogram.
    // pseudoDebugLoc is the unique ID for this CallSite.
    llvm::LLVMContext &C = M.getContext();
    auto DummyProgram = MDSubprogram::getDistinct(C, nullptr, "", "", nullptr, 0,
                                                  nullptr, false, false, 0, nullptr, 0, 0, 0,
                                                  0);
    MDLocation *Location = MDLocation::getDistinct(C,
                                                   uint32_t(pseudoDebugLoc / 65536),
                                                   uint32_t(pseudoDebugLoc % 65536), DummyProgram);
    ++pseudoDebugLoc;
    DebugLoc newLoc(Location);
    CallSite.getInstruction()->setDebugLoc(Location);
  }
  return &Loc;
}

char SDReturnRange::ID = 0;

INITIALIZE_PASS_BEGIN(SDReturnRange, "sdRetRange", "Build return ranges", false, false)
INITIALIZE_PASS_DEPENDENCY(SDBuildCHA)
INITIALIZE_PASS_DEPENDENCY(SDReturnAddress)
INITIALIZE_PASS_END(SDReturnRange, "sdRetRange", "Build return ranges", false, false)

ModulePass *llvm::createSDReturnRangePass() {
  return new SDReturnRange();
}